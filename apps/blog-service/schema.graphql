# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Author {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input AuthorCreateInput {
  name: String!
}

input AuthorOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input AuthorUpdateInput {
  name: String
}

input AuthorWhereInput {
  id: StringFilter
  name: StringFilter
}

input AuthorWhereUniqueInput {
  id: String!
}

type Blog {
  author: String
  content: String
  createdAt: DateTime!
  id: String!
  name: String
  publication: String
  publishedDate: DateTime
  updatedAt: DateTime!
}

input BlogCreateInput {
  author: String
  content: String
  name: String
  publication: String
  publishedDate: DateTime
}

input BlogOrderByInput {
  author: SortOrder
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
  publication: SortOrder
  publishedDate: SortOrder
  updatedAt: SortOrder
}

input BlogUpdateInput {
  author: String
  content: String
  name: String
  publication: String
  publishedDate: DateTime
}

input BlogWhereInput {
  author: StringNullableFilter
  content: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
  publication: StringNullableFilter
  publishedDate: DateTimeNullableFilter
}

input BlogWhereUniqueInput {
  id: String!
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author!
  createBlog(data: BlogCreateInput!): Blog!
  createPublication(data: PublicationCreateInput!): Publication!
  createUser(data: UserCreateInput!): User!
  deleteAuthor(where: AuthorWhereUniqueInput!): Author!
  deleteBlog(where: BlogWhereUniqueInput!): Blog!
  deletePublication(where: PublicationWhereUniqueInput!): Publication!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateAuthor(data: AuthorUpdateInput!, where: AuthorWhereUniqueInput!): Author!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog!
  updatePublication(data: PublicationUpdateInput!, where: PublicationWhereUniqueInput!): Publication!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Publication {
  createdAt: DateTime!
  id: String!
  link: String
  name: String
  updatedAt: DateTime!
}

input PublicationCreateInput {
  link: String
  name: String
}

input PublicationOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  link: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input PublicationUpdateInput {
  link: String
  name: String
}

input PublicationWhereInput {
  id: StringFilter
  link: StringNullableFilter
  name: StringNullableFilter
}

input PublicationWhereUniqueInput {
  id: String!
}

type Query {
  _authorsMeta(where: AuthorWhereInput): MetaQueryPayload!
  _blogsMeta(where: BlogWhereInput): MetaQueryPayload!
  _publicationsMeta(where: PublicationWhereInput): MetaQueryPayload!
  _usersMeta(where: UserWhereInput): MetaQueryPayload!
  author(where: AuthorWhereUniqueInput!): Author
  authors(orderBy: [AuthorOrderByInput!], skip: Float, take: Float, where: AuthorWhereInput): [Author!]!
  blog(where: BlogWhereUniqueInput!): Blog
  blogs(orderBy: [BlogOrderByInput!], skip: Float, take: Float, where: BlogWhereInput): [Blog!]!
  publication(where: PublicationWhereUniqueInput!): Publication
  publications(orderBy: [PublicationOrderByInput!], skip: Float, take: Float, where: PublicationWhereInput): [Publication!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
