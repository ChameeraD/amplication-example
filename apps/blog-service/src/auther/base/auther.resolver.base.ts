/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAutherArgs } from "./CreateAutherArgs";
import { UpdateAutherArgs } from "./UpdateAutherArgs";
import { DeleteAutherArgs } from "./DeleteAutherArgs";
import { AutherFindManyArgs } from "./AutherFindManyArgs";
import { AutherFindUniqueArgs } from "./AutherFindUniqueArgs";
import { Auther } from "./Auther";
import { AutherService } from "../auther.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Auther)
export class AutherResolverBase {
  constructor(
    protected readonly service: AutherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "read",
    possession: "any",
  })
  async _authersMeta(
    @graphql.Args() args: AutherFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Auther])
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "read",
    possession: "any",
  })
  async authers(@graphql.Args() args: AutherFindManyArgs): Promise<Auther[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Auther, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "read",
    possession: "own",
  })
  async auther(
    @graphql.Args() args: AutherFindUniqueArgs
  ): Promise<Auther | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auther)
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "create",
    possession: "any",
  })
  async createAuther(@graphql.Args() args: CreateAutherArgs): Promise<Auther> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Auther)
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "update",
    possession: "any",
  })
  async updateAuther(
    @graphql.Args() args: UpdateAutherArgs
  ): Promise<Auther | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Auther)
  @nestAccessControl.UseRoles({
    resource: "Auther",
    action: "delete",
    possession: "any",
  })
  async deleteAuther(
    @graphql.Args() args: DeleteAutherArgs
  ): Promise<Auther | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
